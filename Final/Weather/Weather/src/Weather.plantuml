@startuml Weather

!define LightCoral


interface WeatherService {
    + getWeather(): WeatherData
}

class WeatherAPIService implements WeatherService {
    + getWeather(): WeatherData
}

note bottom : Factory Design Pattern

class WeatherGovService implements WeatherService {
    + getWeather(): WeatherData
}

class OpenMeteoService implements WeatherService {
    + getWeather(): WeatherData
}

class WeatherData {
    + getTemperature(): double
    + setTemperature(temperature: double): void
    + getHumidity(): double
    + setHumidity(humidity: double): void
    + getPressure(): double
    + setPressure(pressure: double): void
    + getWindSpeed(): double
    + setWindSpeed(windSpeed: double): void
}

interface WeatherObserver {
    + notify(weatherData: WeatherData): void
}

class WeatherSubject {
    - observers: List<WeatherObserver>
    + registerObserver(observer: WeatherObserver): void
    + removeObserver(observer: WeatherObserver): void
    + notifyObservers(weatherData: WeatherData): void
}

note right : Observer Design Pattern

class WeatherForecastSystem {
    - weatherService : weatherService
    - weatherData: WeatherData
    - weatherSubject: WeatherSubject
    + setWeatherService(service : WeatherService) : void
    + updateWeatherData(): void
}

note left : Strategy Design Pattern

class WeatherSubscriber implements WeatherObserver {
    + notify(weatherData: WeatherData): void
}

WeatherForecastSystem o-- WeatherService
WeatherForecastSystem *-- WeatherSubject
WeatherSubject *-- WeatherObserver
WeatherAPIService --> WeatherData
WeatherGovService --> WeatherData
OpenMeteoService --> WeatherData


@enduml